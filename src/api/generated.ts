/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Swagger
 * Swagger [C#](/api.swagger.user.getCSharp) [Java](/api.swagger.user.getJava) [React](/api.swagger.user.getReact)
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
export type PostApiUserTreeNodeRenameParams = {
    treeName: string;
    nodeId: number;
    newNodeName: string;
};

export type PostApiUserTreeNodeDeleteParams = {
    treeName: string;
    nodeId: number;
};

export type PostApiUserTreeNodeCreateParams = {
    treeName: string;
    parentNodeId: number;
    nodeName: string;
};

export type PostApiUserTreeGetParams = {
    treeName: string;
};

export type PostApiUserPartnerRememberMeParams = {
    code: string;
};

export type PostApiUserJournalGetSingleParams = {
    id: number;
};

export type PostApiUserJournalGetRangeParams = {
    skip: number;
    take: number;
};

export interface ReactTestTreeSiteModelMNode {
    id?: number;
    name?: string;
    children?: ReactTestTreeSiteModelMNode[];
}

export interface FxNetWebDefApiDiagnosticViewVJournalFilter {
    from?: string;
    to?: string;
    search?: string;
}

export interface FxNetWebDefApiDiagnosticModelMJournalInfo {
    id?: number;
    eventId?: number;
    createdAt?: string;
}

export interface FxNetWebModelMRangeFxNetWebDefApiDiagnosticModelMJournalInfo {
    skip?: number;
    count?: number;
    items?: FxNetWebDefApiDiagnosticModelMJournalInfo[];
}

export interface FxNetWebDefApiDiagnosticModelMJournal {
    text?: string;
    id?: number;
    eventId?: number;
    createdAt?: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getSwagger = () => {
    /**
     * Provides the pagination API. Skip means the number of items should be skipped by server. Take means the maximum number items should be returned by server. All fields of the filter are optional.
     */
    const postApiUserJournalGetRange = (
        params: PostApiUserJournalGetRangeParams,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>({ url: `/api.user.journal.getRange`, method: 'POST', params }, options);
    };

    /**
     * Returns the information about an particular event by ID.
     */
    const postApiUserJournalGetSingle = (
        params: PostApiUserJournalGetSingleParams,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>({ url: `/api.user.journal.getSingle`, method: 'POST', params }, options);
    };

    const postApiUserPartnerRememberMe = (
        params: PostApiUserPartnerRememberMeParams,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>({ url: `/api.user.partner.rememberMe`, method: 'POST', params }, options);
    };

    /**
     * Returns your entire tree. If your tree doesn't exist it will be created automatically.
     */
    const postApiUserTreeGet = (params: PostApiUserTreeGetParams, options?: SecondParameter<typeof createInstance>) => {
        return createInstance<ReactTestTreeSiteModelMNode>({ url: `/api.user.tree.get`, method: 'POST', params }, options);
    };

    /**
     * Create a new node in your tree. You must to specify a parent node ID that belongs to your tree. A new node name must be unique across all siblings.
     */
    const postApiUserTreeNodeCreate = (
        params: PostApiUserTreeNodeCreateParams,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>({ url: `/api.user.tree.node.create`, method: 'POST', params }, options);
    };

    /**
     * Delete an existing node in your tree. You must specify a node ID that belongs your tree.
     */
    const postApiUserTreeNodeDelete = (
        params: PostApiUserTreeNodeDeleteParams,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>({ url: `/api.user.tree.node.delete`, method: 'POST', params }, options);
    };

    /**
     * Rename an existing node in your tree. You must specify a node ID that belongs your tree. A new name of the node must be unique across all siblings.
     */
    const postApiUserTreeNodeRename = (
        params: PostApiUserTreeNodeRenameParams,
        options?: SecondParameter<typeof createInstance>,
    ) => {
        return createInstance<void>({ url: `/api.user.tree.node.rename`, method: 'POST', params }, options);
    };

    return {
        postApiUserJournalGetRange,
        postApiUserJournalGetSingle,
        postApiUserPartnerRememberMe,
        postApiUserTreeGet,
        postApiUserTreeNodeCreate,
        postApiUserTreeNodeDelete,
        postApiUserTreeNodeRename,
    };
};
export type PostApiUserJournalGetRangeResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getSwagger>['postApiUserJournalGetRange']>>
>;
export type PostApiUserJournalGetSingleResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getSwagger>['postApiUserJournalGetSingle']>>
>;
export type PostApiUserPartnerRememberMeResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getSwagger>['postApiUserPartnerRememberMe']>>
>;
export type PostApiUserTreeGetResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getSwagger>['postApiUserTreeGet']>>
>;
export type PostApiUserTreeNodeCreateResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getSwagger>['postApiUserTreeNodeCreate']>>
>;
export type PostApiUserTreeNodeDeleteResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getSwagger>['postApiUserTreeNodeDelete']>>
>;
export type PostApiUserTreeNodeRenameResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof getSwagger>['postApiUserTreeNodeRename']>>
>;
